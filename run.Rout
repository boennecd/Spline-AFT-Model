
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

* Project '~/Dropbox/skole_backup/postdoc/Spline-AFT-Model' loaded. [renv 0.12.3]
> # source the file with the estimation code
> source("fit-saft.R")
> 
> # prepare colon data set
> colon_use <- within(
+   colon[complete.cases(colon) & colon$etype==2, ], {
+     time <- time/365.25
+     age_c <- scale(age)
+   })
> 
> mf <- model.frame(time ~ rx + sex + age_c + obstruct + perfor + adhere +
+                     factor(differ) + factor(extent) + surg + node4,
+                   colon_use)
> 
> X <- model.matrix(terms(mf), mf)
> 
> y <- model.response(mf)
> event <- colon_use$status
> 
> # get Gauss–Legendre quadrature node and weights
> gl_dat <- get_gl_rule(50)
> 
> # estimate model using B-splines
> system.time(
+   res_bs <- saft_fit(y = y, X = X, event = event, n_knots = 2, gl_dat = gl_dat,
+                      basis_type = "bs"))
   user  system elapsed 
  2.098   0.000   2.098 
> res_bs$coefs
          rxLev       rxLev+5FU             sex           age_c        obstruct 
    -0.03319203     -0.19955858      0.06334079      0.10275162      0.58151835 
         perfor          adhere factor(differ)2 factor(differ)3 factor(extent)2 
    -0.24636202      0.04370215     -0.27112880      0.11367747      0.29354861 
factor(extent)3 factor(extent)4            surg           node4          gamma1 
     0.95986300      1.39783711      0.29433033      0.93147169     -5.53918378 
         gamma2          gamma3          gamma4          gamma5          gamma6 
    -0.35151417      2.43786821      2.48229667      2.45939321      2.41061525 
> res_bs$logLik
[1] -1283.816
> 
> # we can also use C++ which is faster
> system.time(
+   res_bs_cpp <- saft_fit_cpp(y = y, X = X, event = event, n_knots = 2,
+                              gl_dat = gl_dat, basis_type = "bs"))
   user  system elapsed 
  1.711   0.000   1.711 
> 
> all.equal(res_bs[c("coefs", "par")], res_bs_cpp[c("coefs", "par")])
[1] TRUE
> 
> # estimate the model using natural cubic splines
> system.time(
+   res_ns <- saft_fit(y = y, X = X, event = event, n_knots = 4, gl_dat = gl_dat,
+                      basis_type = "ns"))
   user  system elapsed 
  1.443   0.000   1.456 
> res_ns$coefs
          rxLev       rxLev+5FU             sex           age_c        obstruct 
     0.01493506     -0.12867535      0.02292319      0.11321380      0.31930750 
         perfor          adhere factor(differ)2 factor(differ)3 factor(extent)2 
    -0.22991077      0.20395610     -0.21600481      0.36254346      0.15459525 
factor(extent)3 factor(extent)4            surg           node4          gamma1 
     0.88266763      1.18640778      0.28167830      0.94884837     -5.06951183 
         gamma2          gamma3          gamma4          gamma5          gamma6 
     2.50743684      1.73905182      2.45373724      1.31909773      2.35209485 
> res_ns$logLik
[1] -1284.672
> 
> # again, we can also use C++
> system.time(
+   res_ns_cpp <- saft_fit_cpp(y = y, X = X, event = event, n_knots = 4,
+                              gl_dat = gl_dat, basis_type = "ns"))
   user  system elapsed 
  1.268   0.004   1.278 
> 
> all.equal(res_ns[c("coefs", "par")], res_ns_cpp[c("coefs", "par")])
[1] TRUE
> 
> # plot the two estimated splines
> jpeg("saft_fit-spline.jpg", width = 600, height = 400)
> ys <- seq(0, 2 * max(y), length.out = 1000)
> par(mar = c(5, 5, 1, 1))
> with(res_bs, plot(
+   ys, eval_basis(ys) %*% gamma, type = "l", ylim = c(-6, -2.75),
+   main = "", xlab = "Time", ylab = "Spline", bty = "l", yaxs = "i", xaxs = "i"))
> with(res_ns, lines(ys, eval_basis(ys) %*% gamma, lty = 2))
> grid()
> dev.off()
null device 
          1 
> 
> # compare with Weibull model. Should be the same as Pang et al. (2021).
> survreg_res <- survreg(Surv(y, event) ~ X - 1)
> coef(survreg_res)
    X(Intercept)           XrxLev       XrxLev+5FU             Xsex 
      3.35704624       0.04883450       0.37840444      -0.02538239 
          Xage_c        Xobstruct          Xperfor          Xadhere 
     -0.08765944      -0.23448106      -0.03654589      -0.17660104 
Xfactor(differ)2 Xfactor(differ)3 Xfactor(extent)2 Xfactor(extent)3 
      0.09561472      -0.18480493      -0.48145663      -0.96703733 
Xfactor(extent)4            Xsurg           Xnode4 
     -1.32132417      -0.19841858      -0.92013425 
> logLik(survreg_res)
'log Lik.' -1325.124 (df=16)
> 
> # check that we get the same with integrate
> system.time(
+   res_ns_int <- saft_fit(y = y, X = X, event = event, n_knots = 4,
+                          gl_dat = gl_dat, use_integrate = TRUE,
+                          basis_type = "ns", check_grads = FALSE))
   user  system elapsed 
 18.527   0.000  18.527 
> rbind(res_ns$coefs, res_ns_int$coefs)
          rxLev  rxLev+5FU        sex     age_c  obstruct     perfor    adhere
[1,] 0.01493506 -0.1286754 0.02292319 0.1132138 0.3193075 -0.2299108 0.2039561
[2,] 0.01491958 -0.1287088 0.02294579 0.1131900 0.3193091 -0.2298811 0.2038812
     factor(differ)2 factor(differ)3 factor(extent)2 factor(extent)3
[1,]      -0.2160048       0.3625435       0.1545953       0.8826676
[2,]      -0.2159427       0.3626085       0.1544535       0.8826194
     factor(extent)4      surg     node4    gamma1   gamma2   gamma3   gamma4
[1,]        1.186408 0.2816783 0.9488484 -5.069512 2.507437 1.739052 2.453737
[2,]        1.186302 0.2816346 0.9488579 -5.069629 2.507744 1.739106 2.453743
       gamma5   gamma6
[1,] 1.319098 2.352095
[2,] 1.319542 2.352064
> c(`Gauss–Legendre quadrature` = res_ns$logLik,
+   `R's integrate` = res_ns_int$logLik)
Gauss–Legendre quadrature             R's integrate 
                -1284.672                 -1284.674 
> 
> proc.time()
   user  system elapsed 
 33.039   0.321  33.408 
